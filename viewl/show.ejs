 <% layout("boilerplate.ejs") %> 
 
<style>
  .listing-card {
    border: none;
    border-radius: 1rem;
    box-shadow: 0 0 12px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }
  .show-img {
    max-height: 350px;
    object-fit: cover;
  }
  #map {
    height: 300px;
    border-radius: 1rem;
     width: 100%;
  }
  

</style>


    <div class="row mt-4 mb-3 justify-content-center">
  <div class="col-10 col-md-8 text-center">
    <h3 class="fw-semibold mb-2"><%= listing.title %></h3>
    <div style="width: 50px; height: 3px; background-color: #343a40; margin: 0 auto; border-radius: 2px;"></div>
  </div>
</div>


      <div class="container my-4">
  <div class="card mb-4 shadow-sm" style="border-radius: 1rem;">
    <div class="row g-0">
      <div class="col-md-5">
        <img
          src="<%= listing.images.length > 0 ? listing.images[0].url : '/default.jpg' %>"
          class="img-fluid h-100 rounded-start object-fit-cover"
          alt="listing-image"
          style="min-height: 100%; object-fit: cover;"
        />
      </div>
      <div class="col-md-7">
        <div class="card-body px-4">
          <h5 class="card-title fw-bold mb-3">Owned by <i><%= listing.owner.username %></i></h5>
          <p class="card-text mb-2"><%= listing.description %></p>
          <p class="card-text text-success fw-semibold fs-5">&#8377; <%= listing.price.toLocaleString("en-IN") %></p>
          <p class="card-text mb-1"><strong>Country:</strong> <%= listing.location.country %></p>
          <p class="card-text mb-1"><strong>State:</strong> <%= listing.location.state %></p>
          <p class="card-text mb-1"><strong>City:</strong> <%= listing.location.city %></p>
          <p class="card-text"><strong>Street:</strong> <%= listing.location.street %></p>

          <% if (currUser && listing.owner._id.equals(currUser._id)) { %>
            <div class="d-flex flex-wrap mt-3 gap-2">
              <a href="/listings/<%= listing._id %>/edit" class="btn btn-outline-primary">Edit</a>
              <form method="POST" action="/listings/<%= listing._id %>?_method=DELETE">
                <button class="btn btn-outline-danger">Delete</button>
              </form>
            </div>
          <% } %>
           <div class="row mt-3 mb-3">


      <% if(currUser) { %>
        <hr/>
       <% if (currUser && currUser.userType === "traveler" && !listing.owner._id.equals(currUser._id)) { %>
  <button class="btn btn-dark col-4" id="fav-<%= listing._id %>"
    onclick="toggleFavorite('<%= currUser._id %>', '<%= listing._id %>')">
    <% if (favoriteListings.includes(listing._id.toString())) { %>
      Added to Favorite 
    <% } else { %>
      Add to Favorite
    <% } %>
  </button>
<% } else if (currUser && currUser.userType === "owner") { %>
  <div class="alert alert-warning col-12 mt-3">Owners cannot add listings to favorites.</div>
<% } %>

         
        

        
        
      <% if (currUser && currUser.userType === "traveler" && !listing.owner._id.equals(currUser._id)) { %>
  <button class="btn btn-dark col-4 offset-4" data-bs-toggle="modal" data-bs-target="#bookingModal">
    Check availability
  </button>
<% } %>


        
        
</div>

        </div>
      </div>
    </div>
  </div>
</div>

  
<div class="container my-5">
  <div class="card shadow-sm p-4" style="border-radius: 1rem;">
    <div class="row">
      
     
      <div class="col-lg-4 mb-4">
        <h4 class="mb-3">Leave a Review</h4>
        <form action="/listings/<%= listing.id %>/reviews" method="POST" novalidate class="needs-validation">
          <div class="mb-3">
            <label for="rating" class="form-label">Rating</label>
            <input type="range" min="1" max="5" id="rating" class="form-range" name="review[rating]" />
          </div>

          <div class="mb-4">
            <label for="comment" class="form-label">Comments</label>
            <textarea name="review[comment]" id="comment" class="form-control" rows="12" required></textarea>
            <div class="invalid-feedback">Please add some comments for the review.</div>
          </div>
          <button class="btn btn-dark w-100">Submit</button>
        </form>
      </div>

<div class="col-lg-8">
  <h4 class="mb-3">All Reviews</h4>
  <% if (listing.reviews.length > 0) { %>
    <div style="max-height: 500px; overflow-y: auto; overflow-x: hidden; padding-right: 8px;">
      <% for (review of listing.reviews) { %>
        <div class="border rounded p-3 mb-3 shadow-sm bg-light">
          <h6 class="text-primary">@<%= review.author.username %></h6>
          <p class="mb-2"><%= review.comment %></p>
          <p class="mb-2 text-warning">
            <% for (let i = 1; i <= 5; i++) { %>
              <% if (i <= review.rating) { %>
                <i class="fas fa-star"></i>
              <% } else { %>
                <i class="far fa-star"></i>
              <% } %>
            <% } %>
          </p>
          <form method="POST" action="/listings/<%= listing._id %>/reviews/<%= review._id %>?_method=DELETE">
            <button class="btn btn-sm btn-outline-danger">Delete</button>
          </form>
        </div>
      <% } %>
    </div>
  <% } else { %>
    <p class="text-muted">No reviews yet. Be the first to leave one!</p>
  <% } %>
</div>

    </div>
  </div>
</div>


     
      <% } %>


    <div class="container my-4">
  <div class="card shadow-sm" style="border-radius: 1rem;">
    <div class="card-body p-3">
      <h4 class="mb-3">Where you'll be</h4>
      <div id="map" style="height: 300px; width: 100%; border-radius: 0.75rem;"></div>
    </div>
  </div>
 
<button class="btn btn-dark d-none" id="pay-btn">Trigger Pay</button>

</div>
   
     <% if(true) { %>
     <script>
      var map = L.map('map').setView([28.6139, 77.2090], 10); 
  
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; OpenStreetMap contributors'
      }).addTo(map);
  
      var marker; 
   
         
          var url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent("<%= listing.location.city %>" )}`;
  
          fetch(url).then(response => response.json())
          .then(data => {
              if (data.length > 0) {
                  var lat = data[0].lat;
                  var lon = data[0].lon;
                  var location = [lat, lon];
  
                  if (marker) map.removeLayer(marker);
  
                  
                  marker = L.marker(location).addTo(map).bindPopup(`Location: ${data[0].display_name} <br/> <b>Exact Location will be provided after booking <b>`)
                      .openPopup();

                  map.setView(location, 15);
              } else {
                  alert("Location not found!");
              }
          })
          .catch(error => console.error("Error fetching geocode data:", error));
          function toggleFavorite(userId, listingId) {
    if (!userId || !listingId) {
        console.error("Missing userId or listingId!", userId, listingId);
        return;
    }

    const button = document.getElementById(`fav-${listingId}`);
    if (!button) {
        console.error("Button not found for listing:", listingId);
        return;
    }

    console.log("Sending to backend:", { userId, listingId });

    fetch(`/listings/favourite/${listingId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, listingId })
    })
    .then(response => response.json())
    .then(data => {
        console.log("Server response:", data);

        if (data.success) {
            
            if (data.isFavorite) {
                button.innerHTML = "Added to Favorite âœ…";
                button.classList.add('btn-success');
                button.classList.remove('btn-dark');
            } else {
                console.log()
                button.innerHTML = "Add to Favorite";
                button.classList.add('btn-dark');
                button.classList.remove('btn-success');
            }
        } else {
            alert("Failed to update favorite status!");
        }
    })
    .catch(error => console.error('Error:', error));
}   



document.addEventListener("DOMContentLoaded", function () {
      const payBtn = document.getElementById("pay-btn");

      if (payBtn) {
          payBtn.addEventListener("click", async function () {
             
              const currUser = "<%= JSON.stringify(currUser) %>"; 
              if (!currUser) {
                  alert("You must be logged in to make a payment!");
                  return;
              }

              try {
                  const listingId = "<%= listing._id %>";
                  const userId = currUser._id;

                 
                  const response = await fetch(`/listings/payment/${listingId}`, {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({ listingId })
                  });

                  const data = await response.json();

                  if (!data.success) {
                      alert("Failed to create order: " + data.error);
                      return;
                  }

                  
                  const options = {
                      key: "<%= process.env.RAZORPAY_KEY_ID %>",
                      amount: data.amount,
                      currency: "INR",
                      name: "Real Estate Token",
                      description: "Token Money Payment",
                      order_id: data.orderId,
                      handler: async function (response) {
  const checkIn = document.getElementById("checkIn").value;
  const checkOut = document.getElementById("checkOut").value;
  const rooms = parseInt(document.getElementById("rooms").value);
  const price = parseInt(document.getElementById("priceDisplay").value);

  const verifyResponse = await fetch("/listings/pay/verify", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      razorpay_payment_id: response.razorpay_payment_id,
      razorpay_order_id: response.razorpay_order_id,
      razorpay_signature: response.razorpay_signature,
      listingId,
      userId,
      checkIn,
      checkOut,
      rooms,
      price
    })
  });

  const verifyData = await verifyResponse.json();
  if (verifyData.success) {
    alert("Payment Successful!");
    window.location.reload();
  } else {
    alert("Payment verification failed!");
  }
}

                  };

                  const rzp = new Razorpay(options);
                  rzp.open();
              } catch (error) {
                  console.error("Payment error:", error);
                  alert("Something went wrong. Please try again.");
              }
          });
      }
  })
  
document.addEventListener("DOMContentLoaded", function () {
  const confirmBookingBtn = document.getElementById("confirm-booking-btn");

  confirmBookingBtn.addEventListener("click", async function () {
    const listingId = "<%= listing._id %>";
    const checkIn = document.getElementById("checkIn").value;
    const checkOut = document.getElementById("checkOut").value;
    const rooms = parseInt(document.getElementById("rooms").value);

    if (!checkIn || !checkOut || !rooms) {
      alert("Please fill in all booking details.");
      return;
    }

   
    const availabilityRes = await fetch(`/listings/check-availability/${listingId}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ checkIn, checkOut, rooms })
    });

    const availability = await availabilityRes.json();

    if (!availability.success) {
      alert("Error checking availability. Please try again.");
      return;
    }

    if (!availability.available) {
      alert(`Only ${availability.availableRooms} room(s) available for selected dates.`);
      return;
    }

   
    document.getElementById("pay-btn")?.click(); 
  });
});


 
  document.addEventListener("DOMContentLoaded", function () {
    const checkIn = document.getElementById("checkIn");
    const checkOut = document.getElementById("checkOut");
    const rooms = document.getElementById("rooms");
    const priceDisplay = document.getElementById("priceDisplay");
    const pricePerRoom = <%= listing.price %>

    function updatePrice() {
      const inDate = new Date(checkIn.value);
      const outDate = new Date(checkOut.value);
      const days = (outDate - inDate) / (1000 * 60 * 60 * 24);
      const roomCount = parseInt(rooms.value);

      if (days > 0 && roomCount > 0) {
        priceDisplay.value = days * roomCount * pricePerRoom;
      } else {
        priceDisplay.value = "";
      }
    }

    checkIn.addEventListener("change", updatePrice);
    checkOut.addEventListener("change", updatePrice);
    rooms.addEventListener("input", updatePrice);
  });


        </script>
          <% } %>
  
  </div>
 
<div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="bookingModalLabel">Confirm Your Booking</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="booking-form">
          <div class="row g-3">
            <div class="col-md-6">
              <label for="checkIn" class="form-label">Check-in Date</label>
              <input type="date" class="form-control" id="checkIn" required>
            </div>
            <div class="col-md-6">
              <label for="checkOut" class="form-label">Check-out Date</label>
              <input type="date" class="form-control" id="checkOut" required>
            </div>
            <div class="col-md-6">
              <label for="rooms" class="form-label">Rooms Required</label>
              <input type="number" class="form-control" id="rooms" min="1" required>
            </div>
            <div class="col-md-6">
              <label class="form-label">Total Price (â‚¹)</label>
              <input type="text" id="priceDisplay" class="form-control" readonly>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button class="btn btn-dark" id="confirm-booking-btn">Confirm & Pay</button>
      </div>
    </div>
  </div>
  

</div>
